# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Course(BaseModel):
    """
    An academic Course at Waterloo, a Course can be scheduled to become a Class
    """ # noqa: E501
    course_id: Optional[StrictStr] = Field(default=None, description="Course Id that identifies this Course, not unique across terms", alias="courseId")
    course_offer_number: Optional[StrictInt] = Field(default=None, description="Course Offer Number identifies cross-listed and similar Courses that shared a Course Id in a Term", alias="courseOfferNumber")
    term_code: Optional[StrictStr] = Field(default=None, description="Waterloo Term code for which this Course data applies", alias="termCode")
    term_name: Optional[StrictStr] = Field(default=None, description="Waterloo Term name for which this Course data applies", alias="termName")
    associated_academic_career: Optional[StrictStr] = Field(default=None, description="Academic Career code associated with Course", alias="associatedAcademicCareer")
    associated_academic_group_code: Optional[StrictStr] = Field(default=None, description="The Academic Group code that is assocaited to this Course", alias="associatedAcademicGroupCode")
    associated_academic_org_code: Optional[StrictStr] = Field(default=None, description="The Academic Organization code that is associated to this Course", alias="associatedAcademicOrgCode")
    subject_code: Optional[StrictStr] = Field(default=None, description="The Subject code for this Course", alias="subjectCode")
    catalog_number: Optional[StrictStr] = Field(default=None, description="The Catalog Number for this Course", alias="catalogNumber")
    title: Optional[StrictStr] = Field(default=None, description="Course title, full name of course")
    description_abbreviated: Optional[StrictStr] = Field(default=None, description="Short description of the course, often an abbreviation of the title", alias="descriptionAbbreviated")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Course content and topics")
    grading_basis: Optional[StrictStr] = Field(default=None, description="Code to describe the grading basis for this course, can be overriden at Class level", alias="gradingBasis")
    course_component_code: Optional[StrictStr] = Field(default=None, description="Course Component Code that describes if the course is a lecture, tutorial, etc.", alias="courseComponentCode")
    enroll_consent_code: Optional[StrictStr] = Field(default=None, description="Code describing whether No, Instructor, or Department consent to enroll is required. Can be overwridden at Class level.", alias="enrollConsentCode")
    enroll_consent_description: Optional[StrictStr] = Field(default=None, description="Description of the enroll requirement. Can be overwridden at Class level.", alias="enrollConsentDescription")
    drop_consent_code: Optional[StrictStr] = Field(default=None, description="Code describing whether No, Instructor, or Department consent to drop is required. Can be overwridden at Class level.", alias="dropConsentCode")
    drop_consent_description: Optional[StrictStr] = Field(default=None, description="Description of the drop requirement. Can be overwridden at Class level.", alias="dropConsentDescription")
    requirements_description: Optional[StrictStr] = Field(default=None, description="Description of the Course requirements, such as pre-requisites, anti-requisites, and co-requisites", alias="requirementsDescription")
    __properties: ClassVar[List[str]] = ["courseId", "courseOfferNumber", "termCode", "termName", "associatedAcademicCareer", "associatedAcademicGroupCode", "associatedAcademicOrgCode", "subjectCode", "catalogNumber", "title", "descriptionAbbreviated", "description", "gradingBasis", "courseComponentCode", "enrollConsentCode", "enrollConsentDescription", "dropConsentCode", "dropConsentDescription", "requirementsDescription"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Course from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "enroll_consent_description",
                "drop_consent_description",
            },
            exclude_none=True,
        )
        # set to None if course_id (nullable) is None
        # and model_fields_set contains the field
        if self.course_id is None and "course_id" in self.model_fields_set:
            _dict['courseId'] = None

        # set to None if term_code (nullable) is None
        # and model_fields_set contains the field
        if self.term_code is None and "term_code" in self.model_fields_set:
            _dict['termCode'] = None

        # set to None if term_name (nullable) is None
        # and model_fields_set contains the field
        if self.term_name is None and "term_name" in self.model_fields_set:
            _dict['termName'] = None

        # set to None if associated_academic_career (nullable) is None
        # and model_fields_set contains the field
        if self.associated_academic_career is None and "associated_academic_career" in self.model_fields_set:
            _dict['associatedAcademicCareer'] = None

        # set to None if associated_academic_group_code (nullable) is None
        # and model_fields_set contains the field
        if self.associated_academic_group_code is None and "associated_academic_group_code" in self.model_fields_set:
            _dict['associatedAcademicGroupCode'] = None

        # set to None if associated_academic_org_code (nullable) is None
        # and model_fields_set contains the field
        if self.associated_academic_org_code is None and "associated_academic_org_code" in self.model_fields_set:
            _dict['associatedAcademicOrgCode'] = None

        # set to None if subject_code (nullable) is None
        # and model_fields_set contains the field
        if self.subject_code is None and "subject_code" in self.model_fields_set:
            _dict['subjectCode'] = None

        # set to None if catalog_number (nullable) is None
        # and model_fields_set contains the field
        if self.catalog_number is None and "catalog_number" in self.model_fields_set:
            _dict['catalogNumber'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description_abbreviated (nullable) is None
        # and model_fields_set contains the field
        if self.description_abbreviated is None and "description_abbreviated" in self.model_fields_set:
            _dict['descriptionAbbreviated'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if grading_basis (nullable) is None
        # and model_fields_set contains the field
        if self.grading_basis is None and "grading_basis" in self.model_fields_set:
            _dict['gradingBasis'] = None

        # set to None if course_component_code (nullable) is None
        # and model_fields_set contains the field
        if self.course_component_code is None and "course_component_code" in self.model_fields_set:
            _dict['courseComponentCode'] = None

        # set to None if enroll_consent_code (nullable) is None
        # and model_fields_set contains the field
        if self.enroll_consent_code is None and "enroll_consent_code" in self.model_fields_set:
            _dict['enrollConsentCode'] = None

        # set to None if enroll_consent_description (nullable) is None
        # and model_fields_set contains the field
        if self.enroll_consent_description is None and "enroll_consent_description" in self.model_fields_set:
            _dict['enrollConsentDescription'] = None

        # set to None if drop_consent_code (nullable) is None
        # and model_fields_set contains the field
        if self.drop_consent_code is None and "drop_consent_code" in self.model_fields_set:
            _dict['dropConsentCode'] = None

        # set to None if drop_consent_description (nullable) is None
        # and model_fields_set contains the field
        if self.drop_consent_description is None and "drop_consent_description" in self.model_fields_set:
            _dict['dropConsentDescription'] = None

        # set to None if requirements_description (nullable) is None
        # and model_fields_set contains the field
        if self.requirements_description is None and "requirements_description" in self.model_fields_set:
            _dict['requirementsDescription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Course from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courseId": obj.get("courseId"),
            "courseOfferNumber": obj.get("courseOfferNumber"),
            "termCode": obj.get("termCode"),
            "termName": obj.get("termName"),
            "associatedAcademicCareer": obj.get("associatedAcademicCareer"),
            "associatedAcademicGroupCode": obj.get("associatedAcademicGroupCode"),
            "associatedAcademicOrgCode": obj.get("associatedAcademicOrgCode"),
            "subjectCode": obj.get("subjectCode"),
            "catalogNumber": obj.get("catalogNumber"),
            "title": obj.get("title"),
            "descriptionAbbreviated": obj.get("descriptionAbbreviated"),
            "description": obj.get("description"),
            "gradingBasis": obj.get("gradingBasis"),
            "courseComponentCode": obj.get("courseComponentCode"),
            "enrollConsentCode": obj.get("enrollConsentCode"),
            "enrollConsentDescription": obj.get("enrollConsentDescription"),
            "dropConsentCode": obj.get("dropConsentCode"),
            "dropConsentDescription": obj.get("dropConsentDescription"),
            "requirementsDescription": obj.get("requirementsDescription")
        })
        return _obj


