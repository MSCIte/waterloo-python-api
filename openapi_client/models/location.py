# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Location(BaseModel):
    """
    Model representing a Location for the Buildings dataset
    """ # noqa: E501
    building_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this building", alias="buildingId")
    building_code: Optional[StrictStr] = Field(default=None, description="Alpha-numeric building code", alias="buildingCode")
    parent_building_code: Optional[StrictStr] = Field(default=None, description="Unofficial, alpha-numeric building code that represents the parent location", alias="parentBuildingCode")
    building_name: Optional[StrictStr] = Field(default=None, description="Display name of the building", alias="buildingName")
    alternate_building_names: Optional[List[StrictStr]] = Field(default=None, description="Unofficial, collection of alternate building display names", alias="alternateBuildingNames")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude co-ordinate of this location")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude co-ordinate of this location")
    __properties: ClassVar[List[str]] = ["buildingId", "buildingCode", "parentBuildingCode", "buildingName", "alternateBuildingNames", "latitude", "longitude"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Location from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if building_id (nullable) is None
        # and model_fields_set contains the field
        if self.building_id is None and "building_id" in self.model_fields_set:
            _dict['buildingId'] = None

        # set to None if building_code (nullable) is None
        # and model_fields_set contains the field
        if self.building_code is None and "building_code" in self.model_fields_set:
            _dict['buildingCode'] = None

        # set to None if parent_building_code (nullable) is None
        # and model_fields_set contains the field
        if self.parent_building_code is None and "parent_building_code" in self.model_fields_set:
            _dict['parentBuildingCode'] = None

        # set to None if building_name (nullable) is None
        # and model_fields_set contains the field
        if self.building_name is None and "building_name" in self.model_fields_set:
            _dict['buildingName'] = None

        # set to None if alternate_building_names (nullable) is None
        # and model_fields_set contains the field
        if self.alternate_building_names is None and "alternate_building_names" in self.model_fields_set:
            _dict['alternateBuildingNames'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Location from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildingId": obj.get("buildingId"),
            "buildingCode": obj.get("buildingCode"),
            "parentBuildingCode": obj.get("parentBuildingCode"),
            "buildingName": obj.get("buildingName"),
            "alternateBuildingNames": obj.get("alternateBuildingNames"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude")
        })
        return _obj


