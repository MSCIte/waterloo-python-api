# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SiteOpportunity(BaseModel):
    """
    Model representing a WCMS Opportunity (Job)
    """ # noqa: E501
    site_id: Optional[StrictInt] = Field(default=None, description="Unique, numeric site ID", alias="siteId")
    unique_key: Optional[StrictStr] = Field(default=None, description="Unique Id of this opportunity item", alias="uniqueKey")
    title: Optional[StrictStr] = Field(default=None, description="Title of the opportunity")
    publisher_username: Optional[StrictStr] = Field(default=None, description="Username of the user that published this item", alias="publisherUsername")
    updated_date: Optional[datetime] = Field(default=None, description="Last updated date", alias="updatedDate")
    opportunity_type: Optional[StrictStr] = Field(default=None, description="Type of opportunity (ie: volunteer, paid)", alias="opportunityType")
    employment_type: Optional[StrictStr] = Field(default=None, description="Employment type (ie: part, full, other)", alias="employmentType")
    rate_of_pay: Optional[StrictStr] = Field(default=None, description="Rate of paay description", alias="rateOfPay")
    rate_of_pay_type: Optional[StrictStr] = Field(default=None, description="Rate of pay type", alias="rateOfPayType")
    content: Optional[StrictStr] = Field(default=None, description="Opportunity description/content, usually includes HTML markup")
    posted_or_open_date: Optional[datetime] = Field(default=None, description="Posted or open for application date", alias="postedOrOpenDate")
    posted_or_open_date_time_zone: Optional[StrictStr] = Field(default=None, description="Posted or open date time zone", alias="postedOrOpenDateTimeZone")
    application_deadline_date: Optional[datetime] = Field(default=None, description="Opportunity application deadline date", alias="applicationDeadlineDate")
    start_date: Optional[datetime] = Field(default=None, description="Start date for the opportunity", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="End date for the opportunity", alias="endDate")
    number_of_positions: Optional[StrictStr] = Field(default=None, description="Number of positions available for this opportunity", alias="numberOfPositions")
    application_uri: Optional[StrictStr] = Field(default=None, description="URI for an external applicaton website", alias="applicationUri")
    __properties: ClassVar[List[str]] = ["siteId", "uniqueKey", "title", "publisherUsername", "updatedDate", "opportunityType", "employmentType", "rateOfPay", "rateOfPayType", "content", "postedOrOpenDate", "postedOrOpenDateTimeZone", "applicationDeadlineDate", "startDate", "endDate", "numberOfPositions", "applicationUri"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SiteOpportunity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if unique_key (nullable) is None
        # and model_fields_set contains the field
        if self.unique_key is None and "unique_key" in self.model_fields_set:
            _dict['uniqueKey'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if publisher_username (nullable) is None
        # and model_fields_set contains the field
        if self.publisher_username is None and "publisher_username" in self.model_fields_set:
            _dict['publisherUsername'] = None

        # set to None if updated_date (nullable) is None
        # and model_fields_set contains the field
        if self.updated_date is None and "updated_date" in self.model_fields_set:
            _dict['updatedDate'] = None

        # set to None if opportunity_type (nullable) is None
        # and model_fields_set contains the field
        if self.opportunity_type is None and "opportunity_type" in self.model_fields_set:
            _dict['opportunityType'] = None

        # set to None if employment_type (nullable) is None
        # and model_fields_set contains the field
        if self.employment_type is None and "employment_type" in self.model_fields_set:
            _dict['employmentType'] = None

        # set to None if rate_of_pay (nullable) is None
        # and model_fields_set contains the field
        if self.rate_of_pay is None and "rate_of_pay" in self.model_fields_set:
            _dict['rateOfPay'] = None

        # set to None if rate_of_pay_type (nullable) is None
        # and model_fields_set contains the field
        if self.rate_of_pay_type is None and "rate_of_pay_type" in self.model_fields_set:
            _dict['rateOfPayType'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if posted_or_open_date (nullable) is None
        # and model_fields_set contains the field
        if self.posted_or_open_date is None and "posted_or_open_date" in self.model_fields_set:
            _dict['postedOrOpenDate'] = None

        # set to None if posted_or_open_date_time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.posted_or_open_date_time_zone is None and "posted_or_open_date_time_zone" in self.model_fields_set:
            _dict['postedOrOpenDateTimeZone'] = None

        # set to None if application_deadline_date (nullable) is None
        # and model_fields_set contains the field
        if self.application_deadline_date is None and "application_deadline_date" in self.model_fields_set:
            _dict['applicationDeadlineDate'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        # set to None if number_of_positions (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_positions is None and "number_of_positions" in self.model_fields_set:
            _dict['numberOfPositions'] = None

        # set to None if application_uri (nullable) is None
        # and model_fields_set contains the field
        if self.application_uri is None and "application_uri" in self.model_fields_set:
            _dict['applicationUri'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SiteOpportunity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "siteId": obj.get("siteId"),
            "uniqueKey": obj.get("uniqueKey"),
            "title": obj.get("title"),
            "publisherUsername": obj.get("publisherUsername"),
            "updatedDate": obj.get("updatedDate"),
            "opportunityType": obj.get("opportunityType"),
            "employmentType": obj.get("employmentType"),
            "rateOfPay": obj.get("rateOfPay"),
            "rateOfPayType": obj.get("rateOfPayType"),
            "content": obj.get("content"),
            "postedOrOpenDate": obj.get("postedOrOpenDate"),
            "postedOrOpenDateTimeZone": obj.get("postedOrOpenDateTimeZone"),
            "applicationDeadlineDate": obj.get("applicationDeadlineDate"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "numberOfPositions": obj.get("numberOfPositions"),
            "applicationUri": obj.get("applicationUri")
        })
        return _obj


