# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Site(BaseModel):
    """
    Model representing a Site on the Waterloo CMS
    """ # noqa: E501
    site_id: Optional[StrictInt] = Field(default=None, description="Unique, numeric site ID", alias="siteId")
    relative_uri: Optional[StrictStr] = Field(default=None, description="Relative URI of the site from the root uWaterloo CMS domain", alias="relativeUri")
    name: Optional[StrictStr] = Field(default=None, description="Display name of the Site")
    owner_unit_code: Optional[StrictStr] = Field(default=None, description="If available, the department owner code for this Site. Can loosely map to Academic Groups.", alias="ownerUnitCode")
    owner_unit_name_short: Optional[StrictStr] = Field(default=None, description="Short name of the department owner for this Site. See OwnerUnitCode for more.", alias="ownerUnitNameShort")
    owner_unit_name_full: Optional[StrictStr] = Field(default=None, description="Full name of the department owner for this Site. See OwnerUnitCode for more.", alias="ownerUnitNameFull")
    owner_group_code: Optional[StrictStr] = Field(default=None, description="If available, the faculty owner code for this Site. Can loosely map to Academic Organization.", alias="ownerGroupCode")
    owner_type: Optional[StrictStr] = Field(default=None, description="The tag describing the association of the owner department, such as academic, research, and more.", alias="ownerType")
    __properties: ClassVar[List[str]] = ["siteId", "relativeUri", "name", "ownerUnitCode", "ownerUnitNameShort", "ownerUnitNameFull", "ownerGroupCode", "ownerType"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Site from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if relative_uri (nullable) is None
        # and model_fields_set contains the field
        if self.relative_uri is None and "relative_uri" in self.model_fields_set:
            _dict['relativeUri'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if owner_unit_code (nullable) is None
        # and model_fields_set contains the field
        if self.owner_unit_code is None and "owner_unit_code" in self.model_fields_set:
            _dict['ownerUnitCode'] = None

        # set to None if owner_unit_name_short (nullable) is None
        # and model_fields_set contains the field
        if self.owner_unit_name_short is None and "owner_unit_name_short" in self.model_fields_set:
            _dict['ownerUnitNameShort'] = None

        # set to None if owner_unit_name_full (nullable) is None
        # and model_fields_set contains the field
        if self.owner_unit_name_full is None and "owner_unit_name_full" in self.model_fields_set:
            _dict['ownerUnitNameFull'] = None

        # set to None if owner_group_code (nullable) is None
        # and model_fields_set contains the field
        if self.owner_group_code is None and "owner_group_code" in self.model_fields_set:
            _dict['ownerGroupCode'] = None

        # set to None if owner_type (nullable) is None
        # and model_fields_set contains the field
        if self.owner_type is None and "owner_type" in self.model_fields_set:
            _dict['ownerType'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Site from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "siteId": obj.get("siteId"),
            "relativeUri": obj.get("relativeUri"),
            "name": obj.get("name"),
            "ownerUnitCode": obj.get("ownerUnitCode"),
            "ownerUnitNameShort": obj.get("ownerUnitNameShort"),
            "ownerUnitNameFull": obj.get("ownerUnitNameFull"),
            "ownerGroupCode": obj.get("ownerGroupCode"),
            "ownerType": obj.get("ownerType")
        })
        return _obj


