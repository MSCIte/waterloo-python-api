# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.important_date_details import ImportantDateDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ImportantDate(BaseModel):
    """
    An Important Date is an event at a time that has significance to the Waterloo community
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Unique, non-persistent Api Id for this resource")
    name: Optional[StrictStr] = Field(default=None, description="Name/Title of the Important Date")
    description: Optional[StrictStr] = Field(default=None, description="Optional description of the Important Date, can contain markup")
    important_date_type: Optional[StrictStr] = Field(default=None, description="The type category this Important Date belongs to", alias="importantDateType")
    details: Optional[List[ImportantDateDetails]] = Field(default=None, description="Details about terms, dates, and special notes")
    keywords: Optional[List[StrictStr]] = Field(default=None, description="Keywords associated with the Important Date")
    audiences: Optional[List[StrictStr]] = Field(default=None, description="Audiences associated with the Important Date")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "importantDateType", "details", "keywords", "audiences"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ImportantDate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if important_date_type (nullable) is None
        # and model_fields_set contains the field
        if self.important_date_type is None and "important_date_type" in self.model_fields_set:
            _dict['importantDateType'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        # set to None if keywords (nullable) is None
        # and model_fields_set contains the field
        if self.keywords is None and "keywords" in self.model_fields_set:
            _dict['keywords'] = None

        # set to None if audiences (nullable) is None
        # and model_fields_set contains the field
        if self.audiences is None and "audiences" in self.model_fields_set:
            _dict['audiences'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ImportantDate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "importantDateType": obj.get("importantDateType"),
            "details": [ImportantDateDetails.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "keywords": obj.get("keywords"),
            "audiences": obj.get("audiences")
        })
        return _obj


