# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ImportantDateDetails(BaseModel):
    """
    Details about terms, dates, and special notes for an Important Date
    """ # noqa: E501
    important_date_id: Optional[StrictInt] = Field(default=None, description="Id link to associated Important Date, internal", alias="importantDateId")
    term_id: Optional[StrictInt] = Field(default=None, description="Id to the associated Term", alias="termId")
    term_name: Optional[StrictStr] = Field(default=None, description="Name of the associated Term when the Important Date takes place", alias="termName")
    start_date: Optional[datetime] = Field(default=None, description="Start or event date for the Important Date", alias="startDate")
    end_date: Optional[datetime] = Field(default=None, description="Optional end date for the Important Date", alias="endDate")
    notes: Optional[StrictStr] = Field(default=None, description="Any special notes for this occurance of the Important Date, can contain markup")
    __properties: ClassVar[List[str]] = ["importantDateId", "termId", "termName", "startDate", "endDate", "notes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ImportantDateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if term_name (nullable) is None
        # and model_fields_set contains the field
        if self.term_name is None and "term_name" in self.model_fields_set:
            _dict['termName'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['startDate'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['endDate'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ImportantDateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "importantDateId": obj.get("importantDateId"),
            "termId": obj.get("termId"),
            "termName": obj.get("termName"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "notes": obj.get("notes")
        })
        return _obj


