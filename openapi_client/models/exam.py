# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Exam(BaseModel):
    """
    Represents a scheduled Exam for a Class
    """ # noqa: E501
    exam_display_name: Optional[StrictStr] = Field(default=None, description="The name of the Exam, representative of the Course name", alias="examDisplayName")
    sections: Optional[StrictStr] = Field(default=None, description="Sections of the Class this Exam schedule is applicable to")
    is_online_description: Optional[StrictStr] = Field(default=None, description="Indicates whether this Exam is held online, or provides an alternate description", alias="isOnlineDescription")
    day: Optional[StrictStr] = Field(default=None, description="Day name on which this Exam is scheduled to take place")
    location: Optional[StrictStr] = Field(default=None, description="Description of the location of the Exam")
    exam_window_start_date: Optional[StrictStr] = Field(default=None, description="The date the Exam is scheduled for", alias="examWindowStartDate")
    exam_window_start_time: Optional[StrictStr] = Field(default=None, description="The time the Exam is scheduled to start", alias="examWindowStartTime")
    exam_duration: Optional[StrictStr] = Field(default=None, description="The scheduled duration of the Exam", alias="examDuration")
    notes: Optional[StrictStr] = Field(default=None, description="Additional notes about this Exam schedule")
    term_code: Optional[StrictStr] = Field(default=None, description="Term Code for the Term this Exam is associated with", alias="termCode")
    __properties: ClassVar[List[str]] = ["examDisplayName", "sections", "isOnlineDescription", "day", "location", "examWindowStartDate", "examWindowStartTime", "examDuration", "notes", "termCode"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Exam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if exam_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.exam_display_name is None and "exam_display_name" in self.model_fields_set:
            _dict['examDisplayName'] = None

        # set to None if sections (nullable) is None
        # and model_fields_set contains the field
        if self.sections is None and "sections" in self.model_fields_set:
            _dict['sections'] = None

        # set to None if is_online_description (nullable) is None
        # and model_fields_set contains the field
        if self.is_online_description is None and "is_online_description" in self.model_fields_set:
            _dict['isOnlineDescription'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['day'] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict['location'] = None

        # set to None if exam_window_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.exam_window_start_date is None and "exam_window_start_date" in self.model_fields_set:
            _dict['examWindowStartDate'] = None

        # set to None if exam_window_start_time (nullable) is None
        # and model_fields_set contains the field
        if self.exam_window_start_time is None and "exam_window_start_time" in self.model_fields_set:
            _dict['examWindowStartTime'] = None

        # set to None if exam_duration (nullable) is None
        # and model_fields_set contains the field
        if self.exam_duration is None and "exam_duration" in self.model_fields_set:
            _dict['examDuration'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if term_code (nullable) is None
        # and model_fields_set contains the field
        if self.term_code is None and "term_code" in self.model_fields_set:
            _dict['termCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Exam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "examDisplayName": obj.get("examDisplayName"),
            "sections": obj.get("sections"),
            "isOnlineDescription": obj.get("isOnlineDescription"),
            "day": obj.get("day"),
            "location": obj.get("location"),
            "examWindowStartDate": obj.get("examWindowStartDate"),
            "examWindowStartTime": obj.get("examWindowStartTime"),
            "examDuration": obj.get("examDuration"),
            "notes": obj.get("notes"),
            "termCode": obj.get("termCode")
        })
        return _obj


