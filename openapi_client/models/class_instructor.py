# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClassInstructor(BaseModel):
    """
    A person instructing a Class
    """ # noqa: E501
    course_id: Optional[StrictStr] = Field(default=None, description="Course identifier number, not unique", alias="courseId")
    course_offer_number: Optional[StrictInt] = Field(default=None, description="Course offer number identifier for this class", alias="courseOfferNumber")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code number for this class", alias="sessionCode")
    class_section: Optional[StrictInt] = Field(default=None, description="Number identifying the section of this class", alias="classSection")
    term_code: Optional[StrictStr] = Field(default=None, description="Waterloo academic term code", alias="termCode")
    instructor_role_code: Optional[StrictStr] = Field(default=None, description="REMOVED for privacy. The code designation for the instructor's role in this class", alias="instructorRoleCode")
    instructor_first_name: Optional[StrictStr] = Field(default=None, description="REMOVED for privacy. The Instructors preferred first name", alias="instructorFirstName")
    instructor_last_name: Optional[StrictStr] = Field(default=None, description="REMOVED for privacy. The Instructors preferred last name", alias="instructorLastName")
    instructor_unique_identifier: Optional[StrictStr] = Field(default=None, description="REMOVED for privacy. A unique identifier that persists through name changes. Not guaranteed, but likely to be immutable for instructor.", alias="instructorUniqueIdentifier")
    class_meeting_number: Optional[StrictInt] = Field(default=None, description="Identifier for the class meeting this instructor is for", alias="classMeetingNumber")
    __properties: ClassVar[List[str]] = ["courseId", "courseOfferNumber", "sessionCode", "classSection", "termCode", "instructorRoleCode", "instructorFirstName", "instructorLastName", "instructorUniqueIdentifier", "classMeetingNumber"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClassInstructor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if course_id (nullable) is None
        # and model_fields_set contains the field
        if self.course_id is None and "course_id" in self.model_fields_set:
            _dict['courseId'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['sessionCode'] = None

        # set to None if term_code (nullable) is None
        # and model_fields_set contains the field
        if self.term_code is None and "term_code" in self.model_fields_set:
            _dict['termCode'] = None

        # set to None if instructor_role_code (nullable) is None
        # and model_fields_set contains the field
        if self.instructor_role_code is None and "instructor_role_code" in self.model_fields_set:
            _dict['instructorRoleCode'] = None

        # set to None if instructor_first_name (nullable) is None
        # and model_fields_set contains the field
        if self.instructor_first_name is None and "instructor_first_name" in self.model_fields_set:
            _dict['instructorFirstName'] = None

        # set to None if instructor_last_name (nullable) is None
        # and model_fields_set contains the field
        if self.instructor_last_name is None and "instructor_last_name" in self.model_fields_set:
            _dict['instructorLastName'] = None

        # set to None if instructor_unique_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.instructor_unique_identifier is None and "instructor_unique_identifier" in self.model_fields_set:
            _dict['instructorUniqueIdentifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClassInstructor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courseId": obj.get("courseId"),
            "courseOfferNumber": obj.get("courseOfferNumber"),
            "sessionCode": obj.get("sessionCode"),
            "classSection": obj.get("classSection"),
            "termCode": obj.get("termCode"),
            "instructorRoleCode": obj.get("instructorRoleCode"),
            "instructorFirstName": obj.get("instructorFirstName"),
            "instructorLastName": obj.get("instructorLastName"),
            "instructorUniqueIdentifier": obj.get("instructorUniqueIdentifier"),
            "classMeetingNumber": obj.get("classMeetingNumber")
        })
        return _obj


