# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from openapi_client.models.class_instructor import ClassInstructor
from openapi_client.models.class_schedule import ClassSchedule
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ModelClass(BaseModel):
    """
    Represents an Academic class, which is a scheduled instance of a Course
    """ # noqa: E501
    course_id: Optional[StrictStr] = Field(default=None, description="Course identifier number, not unique", alias="courseId")
    course_offer_number: Optional[StrictInt] = Field(default=None, description="Course offer number identifier for this class", alias="courseOfferNumber")
    session_code: Optional[StrictStr] = Field(default=None, description="Session code for this class", alias="sessionCode")
    class_section: Optional[StrictInt] = Field(default=None, description="Number identifying the section of this class", alias="classSection")
    term_code: Optional[StrictStr] = Field(default=None, description="Waterloo academic term code", alias="termCode")
    class_number: Optional[StrictInt] = Field(default=None, description="Class number identifier for this class", alias="classNumber")
    course_component: Optional[StrictStr] = Field(default=None, description="Course component code for this class", alias="courseComponent")
    associated_class_code: Optional[StrictInt] = Field(default=None, description="Associated class code for this class", alias="associatedClassCode")
    max_enrollment_capacity: Optional[StrictInt] = Field(default=None, description="Indicates the maximum number of students that can enroll in this class", alias="maxEnrollmentCapacity")
    enrolled_students: Optional[StrictInt] = Field(default=None, description="Indicates the current number of students enrolled in this class", alias="enrolledStudents")
    enroll_consent_code: Optional[StrictStr] = Field(default=None, description="Code describing whether No, Instructor, or Department consent to enroll is required. Overrides Course level information if different.", alias="enrollConsentCode")
    enroll_consent_description: Optional[StrictStr] = Field(default=None, description="Description of the enroll requirement. Overrides Course level information if different.", alias="enrollConsentDescription")
    drop_consent_code: Optional[StrictStr] = Field(default=None, description="Code describing whether No, Instructor, or Department consent to drop is required. Overrides Course level information if different.", alias="dropConsentCode")
    drop_consent_description: Optional[StrictStr] = Field(default=None, description="Description of the drop requirement. Overrides Course level information if different.", alias="dropConsentDescription")
    schedule_data: Optional[List[ClassSchedule]] = Field(default=None, description="Schedule data for this class", alias="scheduleData")
    instructor_data: Optional[List[ClassInstructor]] = Field(default=None, description="Instructor data for this class", alias="instructorData")
    __properties: ClassVar[List[str]] = ["courseId", "courseOfferNumber", "sessionCode", "classSection", "termCode", "classNumber", "courseComponent", "associatedClassCode", "maxEnrollmentCapacity", "enrolledStudents", "enrollConsentCode", "enrollConsentDescription", "dropConsentCode", "dropConsentDescription", "scheduleData", "instructorData"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ModelClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "enroll_consent_description",
                "drop_consent_description",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_data (list)
        _items = []
        if self.schedule_data:
            for _item in self.schedule_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scheduleData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instructor_data (list)
        _items = []
        if self.instructor_data:
            for _item in self.instructor_data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instructorData'] = _items
        # set to None if course_id (nullable) is None
        # and model_fields_set contains the field
        if self.course_id is None and "course_id" in self.model_fields_set:
            _dict['courseId'] = None

        # set to None if session_code (nullable) is None
        # and model_fields_set contains the field
        if self.session_code is None and "session_code" in self.model_fields_set:
            _dict['sessionCode'] = None

        # set to None if term_code (nullable) is None
        # and model_fields_set contains the field
        if self.term_code is None and "term_code" in self.model_fields_set:
            _dict['termCode'] = None

        # set to None if course_component (nullable) is None
        # and model_fields_set contains the field
        if self.course_component is None and "course_component" in self.model_fields_set:
            _dict['courseComponent'] = None

        # set to None if enroll_consent_code (nullable) is None
        # and model_fields_set contains the field
        if self.enroll_consent_code is None and "enroll_consent_code" in self.model_fields_set:
            _dict['enrollConsentCode'] = None

        # set to None if enroll_consent_description (nullable) is None
        # and model_fields_set contains the field
        if self.enroll_consent_description is None and "enroll_consent_description" in self.model_fields_set:
            _dict['enrollConsentDescription'] = None

        # set to None if drop_consent_code (nullable) is None
        # and model_fields_set contains the field
        if self.drop_consent_code is None and "drop_consent_code" in self.model_fields_set:
            _dict['dropConsentCode'] = None

        # set to None if drop_consent_description (nullable) is None
        # and model_fields_set contains the field
        if self.drop_consent_description is None and "drop_consent_description" in self.model_fields_set:
            _dict['dropConsentDescription'] = None

        # set to None if schedule_data (nullable) is None
        # and model_fields_set contains the field
        if self.schedule_data is None and "schedule_data" in self.model_fields_set:
            _dict['scheduleData'] = None

        # set to None if instructor_data (nullable) is None
        # and model_fields_set contains the field
        if self.instructor_data is None and "instructor_data" in self.model_fields_set:
            _dict['instructorData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ModelClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "courseId": obj.get("courseId"),
            "courseOfferNumber": obj.get("courseOfferNumber"),
            "sessionCode": obj.get("sessionCode"),
            "classSection": obj.get("classSection"),
            "termCode": obj.get("termCode"),
            "classNumber": obj.get("classNumber"),
            "courseComponent": obj.get("courseComponent"),
            "associatedClassCode": obj.get("associatedClassCode"),
            "maxEnrollmentCapacity": obj.get("maxEnrollmentCapacity"),
            "enrolledStudents": obj.get("enrolledStudents"),
            "enrollConsentCode": obj.get("enrollConsentCode"),
            "enrollConsentDescription": obj.get("enrollConsentDescription"),
            "dropConsentCode": obj.get("dropConsentCode"),
            "dropConsentDescription": obj.get("dropConsentDescription"),
            "scheduleData": [ClassSchedule.from_dict(_item) for _item in obj.get("scheduleData")] if obj.get("scheduleData") is not None else None,
            "instructorData": [ClassInstructor.from_dict(_item) for _item in obj.get("instructorData")] if obj.get("instructorData") is not None else None
        })
        return _obj


