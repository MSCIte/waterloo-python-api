# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from openapi_client.models.body import Body
from openapi_client.models.changed import Changed
from openapi_client.models.comment_count import CommentCount
from openapi_client.models.created import Created
from openapi_client.models.last_activity import LastActivity
from openapi_client.models.name import Name
from openapi_client.models.title import Title
from openapi_client.models.uid import Uid
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RdfMapping(BaseModel):
    """
    RdfMapping
    """ # noqa: E501
    rdftype: Optional[List[StrictStr]] = None
    title: Optional[Title] = None
    created: Optional[Created] = None
    changed: Optional[Changed] = None
    body: Optional[Body] = None
    uid: Optional[Uid] = None
    name: Optional[Name] = None
    comment_count: Optional[CommentCount] = None
    last_activity: Optional[LastActivity] = None
    __properties: ClassVar[List[str]] = ["rdftype", "title", "created", "changed", "body", "uid", "name", "comment_count", "last_activity"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RdfMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created
        if self.created:
            _dict['created'] = self.created.to_dict()
        # override the default output from pydantic by calling `to_dict()` of changed
        if self.changed:
            _dict['changed'] = self.changed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uid
        if self.uid:
            _dict['uid'] = self.uid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment_count
        if self.comment_count:
            _dict['comment_count'] = self.comment_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_activity
        if self.last_activity:
            _dict['last_activity'] = self.last_activity.to_dict()
        # set to None if rdftype (nullable) is None
        # and model_fields_set contains the field
        if self.rdftype is None and "rdftype" in self.model_fields_set:
            _dict['rdftype'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RdfMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rdftype": obj.get("rdftype"),
            "title": Title.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "created": Created.from_dict(obj.get("created")) if obj.get("created") is not None else None,
            "changed": Changed.from_dict(obj.get("changed")) if obj.get("changed") is not None else None,
            "body": Body.from_dict(obj.get("body")) if obj.get("body") is not None else None,
            "uid": Uid.from_dict(obj.get("uid")) if obj.get("uid") is not None else None,
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "comment_count": CommentCount.from_dict(obj.get("comment_count")) if obj.get("comment_count") is not None else None,
            "last_activity": LastActivity.from_dict(obj.get("last_activity")) if obj.get("last_activity") is not None else None
        })
        return _obj


