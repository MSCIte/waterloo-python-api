# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Und1(BaseModel):
    """
    Und1
    """ # noqa: E501
    fid: Optional[StrictStr] = None
    uid: Optional[StrictStr] = None
    filename: Optional[StrictStr] = None
    uri: Optional[StrictStr] = None
    filemime: Optional[StrictStr] = None
    filesize: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    rdf_mapping: Optional[List[Any]] = None
    focal_point: Optional[StrictStr] = None
    alt: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    width: Optional[StrictStr] = None
    height: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["fid", "uid", "filename", "uri", "filemime", "filesize", "status", "timestamp", "uuid", "rdf_mapping", "focal_point", "alt", "title", "width", "height"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Und1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if fid (nullable) is None
        # and model_fields_set contains the field
        if self.fid is None and "fid" in self.model_fields_set:
            _dict['fid'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        # set to None if filename (nullable) is None
        # and model_fields_set contains the field
        if self.filename is None and "filename" in self.model_fields_set:
            _dict['filename'] = None

        # set to None if uri (nullable) is None
        # and model_fields_set contains the field
        if self.uri is None and "uri" in self.model_fields_set:
            _dict['uri'] = None

        # set to None if filemime (nullable) is None
        # and model_fields_set contains the field
        if self.filemime is None and "filemime" in self.model_fields_set:
            _dict['filemime'] = None

        # set to None if filesize (nullable) is None
        # and model_fields_set contains the field
        if self.filesize is None and "filesize" in self.model_fields_set:
            _dict['filesize'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if uuid (nullable) is None
        # and model_fields_set contains the field
        if self.uuid is None and "uuid" in self.model_fields_set:
            _dict['uuid'] = None

        # set to None if rdf_mapping (nullable) is None
        # and model_fields_set contains the field
        if self.rdf_mapping is None and "rdf_mapping" in self.model_fields_set:
            _dict['rdf_mapping'] = None

        # set to None if focal_point (nullable) is None
        # and model_fields_set contains the field
        if self.focal_point is None and "focal_point" in self.model_fields_set:
            _dict['focal_point'] = None

        # set to None if alt (nullable) is None
        # and model_fields_set contains the field
        if self.alt is None and "alt" in self.model_fields_set:
            _dict['alt'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if width (nullable) is None
        # and model_fields_set contains the field
        if self.width is None and "width" in self.model_fields_set:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['height'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Und1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fid": obj.get("fid"),
            "uid": obj.get("uid"),
            "filename": obj.get("filename"),
            "uri": obj.get("uri"),
            "filemime": obj.get("filemime"),
            "filesize": obj.get("filesize"),
            "status": obj.get("status"),
            "timestamp": obj.get("timestamp"),
            "uuid": obj.get("uuid"),
            "rdf_mapping": obj.get("rdf_mapping"),
            "focal_point": obj.get("focal_point"),
            "alt": obj.get("alt"),
            "title": obj.get("title"),
            "width": obj.get("width"),
            "height": obj.get("height")
        })
        return _obj


