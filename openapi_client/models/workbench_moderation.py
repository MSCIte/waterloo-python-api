# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from openapi_client.models.current import Current
from openapi_client.models.my_revision import MyRevision
from openapi_client.models.published import Published
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WorkbenchModeration(BaseModel):
    """
    WorkbenchModeration
    """ # noqa: E501
    current: Optional[Current] = None
    published: Optional[Published] = None
    my_revision: Optional[MyRevision] = None
    __properties: ClassVar[List[str]] = ["current", "published", "my_revision"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WorkbenchModeration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current
        if self.current:
            _dict['current'] = self.current.to_dict()
        # override the default output from pydantic by calling `to_dict()` of published
        if self.published:
            _dict['published'] = self.published.to_dict()
        # override the default output from pydantic by calling `to_dict()` of my_revision
        if self.my_revision:
            _dict['my_revision'] = self.my_revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WorkbenchModeration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "current": Current.from_dict(obj.get("current")) if obj.get("current") is not None else None,
            "published": Published.from_dict(obj.get("published")) if obj.get("published") is not None else None,
            "my_revision": MyRevision.from_dict(obj.get("my_revision")) if obj.get("my_revision") is not None else None
        })
        return _obj


