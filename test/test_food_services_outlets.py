# coding: utf-8

"""
    Waterloo OpenData API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.food_services_outlets import FoodServicesOutlets

class TestFoodServicesOutlets(unittest.TestCase):
    """FoodServicesOutlets unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FoodServicesOutlets:
        """Test FoodServicesOutlets
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FoodServicesOutlets`
        """
        model = FoodServicesOutlets()
        if include_optional:
            return FoodServicesOutlets(
                data = [
                    openapi_client.models.food_services_outlet.FoodServicesOutlet(
                        id = 56, 
                        self = '', 
                        name = '', 
                        image = [
                            openapi_client.models.food_services_outlet_image.FoodServicesOutletImage(
                                id = '', 
                                url = '', 
                                filemime = '', 
                                filesize = '', 
                                width = '', 
                                height = '', 
                                alt = '', 
                                title = '', )
                            ], 
                        photo = openapi_client.models.food_services_outlet_photo.FoodServicesOutletPhoto(
                            id = '', 
                            url = '', 
                            filemime = '', 
                            filesize = '', 
                            width = '', 
                            height = '', 
                            alt = '', 
                            title = '', ), 
                        features = '', 
                        outlettype = [
                            openapi_client.models.outlet_type.OutletType(
                                tid = '', 
                                name = '', 
                                description = '', )
                            ], 
                        outletlocation = '', 
                        locationlink = openapi_client.models.location_link.LocationLink(
                            url = '', 
                            title = null, 
                            attributes = [
                                null
                                ], 
                            original_title = null, 
                            original_url = '', ), 
                        description = '', 
                        location = [
                            openapi_client.models.outlet_location.OutletLocation(
                                lid = '', 
                                name = '', 
                                street = '', 
                                additional = '', 
                                city = '', 
                                province = '', 
                                postal_code = '', 
                                country = '', 
                                latitude = '', 
                                longitude = '', 
                                source = '', 
                                is_primary = '', 
                                locpick = openapi_client.models.locpick.Locpick(
                                    user_latitude = '', 
                                    user_longitude = '', ), 
                                province_name = '', 
                                country_name = '', )
                            ], 
                        summary = '', 
                        cuisine = [
                            openapi_client.models.cuisine.Cuisine(
                                id = '', 
                                self = '', 
                                name = '', 
                                description = '', )
                            ], 
                        openinghours = [
                            openapi_client.models.opening_hour.OpeningHour(
                                day = '', 
                                starthours = '', 
                                endhours = '', 
                                comment = '', )
                            ], 
                        paymentaccepted = [
                            openapi_client.models.payment_accepted.PaymentAccepted(
                                tid = '', 
                                name = '', )
                            ], 
                        closed = [
                            openapi_client.models.closed.Closed(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value2 = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                timezone_db = '', 
                                date_type = '', )
                            ], 
                        hourschange = [
                            openapi_client.models.hours_change.HoursChange(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                value2 = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                timezone_db = '', 
                                date_type = '', )
                            ], 
                        notice = '', 
                        franchisemenu = [
                            openapi_client.models.franchise_menu.FranchiseMenu(
                                vid = '', 
                                uid = '', 
                                title = '', 
                                log = '', 
                                status = '', 
                                comment = '', 
                                promote = '', 
                                sticky = '', 
                                vuuid = '', 
                                nid = '', 
                                type = '', 
                                language = '', 
                                created = '', 
                                changed = '', 
                                tnid = '', 
                                translate = '', 
                                uuid = '', 
                                revision_timestamp = '', 
                                revision_uid = '', 
                                field_addons = null, 
                                field_combos = openapi_client.models.field_combos.Field_Combos(
                                    und = [
                                        openapi_client.models.und.Und(
                                            value = '', 
                                            revision_id = '', )
                                        ], ), 
                                field_franchise_logo = openapi_client.models.field_franchise_logo.Field_Franchise_Logo(), 
                                field_individual_items = null, 
                                title_field = openapi_client.models.title_field.Title_Field(
                                    en = [
                                        openapi_client.models.en.En(
                                            value = '', 
                                            format = null, 
                                            safe_value = '', )
                                        ], ), 
                                metatags = openapi_client.models.metatags.Metatags(), 
                                rdf_mapping = openapi_client.models.rdf_mapping.Rdf_Mapping(
                                    rdftype = [
                                        ''
                                        ], 
                                    title = openapi_client.models.title.Title(
                                        predicates = [
                                            ''
                                            ], ), 
                                    created = openapi_client.models.created.Created(
                                        datatype = '', 
                                        callback = '', ), 
                                    changed = openapi_client.models.changed.Changed(
                                        datatype = '', 
                                        callback = '', ), 
                                    body = openapi_client.models.body.Body(), 
                                    uid = openapi_client.models.uid.Uid(
                                        type = '', ), 
                                    name = openapi_client.models.name.Name(), 
                                    comment_count = openapi_client.models.comment_count.Comment_Count(
                                        datatype = '', ), 
                                    last_activity = openapi_client.models.last_activity.Last_Activity(
                                        datatype = '', 
                                        callback = '', ), ), 
                                path = openapi_client.models.path.Path(
                                    pid = '', 
                                    source = '', 
                                    alias = '', 
                                    language = '', 
                                    pathauto = '', ), 
                                translations = openapi_client.models.translations.Translations(
                                    original = '', 
                                    data = openapi_client.models.data.Data(), ), 
                                title_original = '', 
                                entity_translation_handler_id = '', 
                                title_language = '', 
                                cid = '', 
                                last_comment_timestamp = '', 
                                last_comment_name = null, 
                                last_comment_uid = '', 
                                comment_count = '', 
                                name = '', 
                                picture = '', 
                                data = '', 
                                uw_page_settings_node_enable = '', 
                                workbench_moderation = openapi_client.models.workbench_moderation.Workbench_Moderation(
                                    current = openapi_client.models.current.Current(
                                        hid = '', 
                                        vid = '', 
                                        nid = '', 
                                        from_state = '', 
                                        state = '', 
                                        stamp = '', 
                                        published = '', 
                                        is_current = 56, 
                                        timestamp = '', ), 
                                    published = openapi_client.models.published.Published(
                                        hid = '', 
                                        vid = '', 
                                        nid = '', 
                                        from_state = '', 
                                        state = '', 
                                        stamp = '', 
                                        is_current = 56, 
                                        timestamp = '', ), 
                                    my_revision = openapi_client.models.my_revision.My_Revision(
                                        hid = '', 
                                        vid = '', 
                                        nid = '', 
                                        from_state = '', 
                                        state = '', 
                                        stamp = '', 
                                        is_current = 56, 
                                        timestamp = '', ), ), )
                            ], 
                        sticky = '', 
                        created = '', )
                    ],
                count = 56,
                var_self = openapi_client.models.food_services_outlets_self.FoodServicesOutletsSelf(
                    title = '', 
                    href = '', )
            )
        else:
            return FoodServicesOutlets(
        )
        """

    def testFoodServicesOutlets(self):
        """Test FoodServicesOutlets"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
